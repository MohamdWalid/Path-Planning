# -*- coding: utf-8 -*-
"""Path Planning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LrvhE8VSlb_oxnzFShVa-OgeP_7BVIOV
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Graph
graph = np.array(list(1 for i in range(1000) for j in range(1000))).reshape(1000,1000)

# Obstacles
graph[800:1000,0:200] = 0
graph[0:800,400:600] = 0
graph[600:1000,700:800] = 0

# Start_End
start = [10,10]
end = [950,950]

# Obstacle_1
plt.plot([0,200],[800,800],c='r')
plt.plot([0,200],[1000,1000],c='r')
plt.plot([200,200],[800,1000],c='r')

# Obstacle_2
plt.plot([0,0],[400,600],c='r')
plt.plot([400,400],[0,800],c='r')
plt.plot([600,600],[0,800],c='r')
plt.plot([600,400],[800,800],c='r')

#Obstacle_3
plt.plot([700,700],[600,1000],c='r')
plt.plot([800,800],[600,1000],c='r')
plt.plot([700,800],[600,600],c='r')

# Start_End
plt.scatter(start[0],start[1],c='b')
plt.scatter(end[0],end[1],c='c')

plt.xlim(0,1000)
plt.ylim(0,1000)
plt.show()

start = np.array(start)
end = np.array(end)
print(start)
i =0
block_points = [0,1,2,3]
path = [1,2,3]
Distance = []
x_y = []
check = []
block=[]
while i<1000:
  if all(start == end):
     break
  else:
     Right = all(graph[start[1]][start[0]:start[0]+10])
     x_y_Right = np.array([start[0]+10,start[1]])
     Dis_Right_goal = np.power(np.sum(np.power(end - x_y_Right,2)),0.5)
    
     Left = all(graph[start[1]][start[0]:start[0]-10])
     x_y_Left = np.array([start[0]-10,start[1]])
     Dis_Left_goal = np.power(np.sum(np.power(end - x_y_Left,2)),0.5)

     UP = all(graph[start[1]:start[1]+10,start[0]])
     x_y_UP = np.array([start[0],start[1]+10])
     Dis_UP_goal = np.power(np.sum(np.power(end - x_y_UP,2)),0.5)

     Down = all(graph[start[1]:start[1]-10,start[0]])
     x_y_Down = np.array([start[0],start[1]-10])
     Dis_Down_goal = np.power(np.sum(np.power(end - x_y_Down,2)),0.5)

     Distance.append(Dis_Right_goal)
     Distance.append(Dis_Left_goal)
     Distance.append(Dis_UP_goal)
     Distance.append(Dis_Down_goal)
     x_y.append(list(x_y_Right))
     x_y.append(list(x_y_Left))
     x_y.append(list(x_y_UP))
     x_y.append(list(x_y_Down))
     check.append(Right)
     check.append(Left)
     check.append(UP)
     check.append(Down)
     for j in range(0,4):
       if (check[np.argmin(Distance)]):
         if((x_y[np.argmin(Distance)] not in block)):
               start = x_y[np.argmin(Distance)]
               path.append(list(start))
               if path.index(list(start))!=len(path)-1 :
                 for i in range(path.index(list(start))+1,len(path)-2):
                   block.append(path[i])
               break
         elif (x_y[np.argmin(Distance)] in block):
              Distance[np.argmin(Distance)] = 100000000000000
             
       else:
         Distance[np.argmin(Distance)] = 100000000000000
         
  
     Distance.clear()
     x_y.clear()
     check.clear()
  i+=1
  plt.scatter(start[0],start[1],c='g')

# Obstacle_1
plt.plot([0,200],[800,800],c='r')
plt.plot([0,200],[1000,1000],c='r')
plt.plot([200,200],[800,1000],c='r')

# Obstacle_2
plt.plot([0,0],[400,600],c='r')
plt.plot([400,400],[0,800],c='r')
plt.plot([600,600],[0,800],c='r')
plt.plot([600,400],[800,800],c='r')

# Obstacle_3
plt.plot([700,700],[600,1000],c='r')
plt.plot([800,800],[600,1000],c='r')
plt.plot([700,800],[600,600],c='r')



plt.xlim(0,1000)
plt.ylim(0,1000)
plt.show()